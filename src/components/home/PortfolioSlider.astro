---
// Modern, responsive portfolio slider section
// Uses native scroll-snap with JS controls for arrows & keyboard
// Images use external high-quality sources to avoid bundling weight
import {Image} from 'astro:assets';
import stairway from '../../assets/images/4c1c1eb1-c858-4736-aa94-82f93937c631.jpeg'
import balcony from '../../assets/images/c00a8b09-fe57-4f6a-a8c2-8686c11658fb.jpeg'
import kitchen from '../../assets/images/1770f7f9-70e7-4996-abbe-b974de4f7986.jpeg'
import livingRoom from '../../assets/images/893f11c7-40a4-400b-80c3-3a8178b54ad6.jpeg'

const slides = [
  {
    img:
    stairway,
    title: 'Lorem ipsum dolor.',
    subtitle: 'Lorem',
    width: 450,
    height: 420
  },
  {
    img:
        balcony,
    title: 'Lorem ipsum.',
    subtitle: 'Lorem',
    width: 840,
    height: 420
  },
  {
    img:
        kitchen,
    title: 'Lorem ipsum.',
    subtitle: 'Lorem',
    width: 450,
    height: 420
  },
  {
    img:
        livingRoom,
    title: 'Lorem ipsum.',
    subtitle: 'Lorem',
    width: 840,
    height: 420
  },
];
---
<section class="w-full bg-[#f7f6f3] py-20 sm:py-24">
  <div class="mx-auto max-w-7xl px-4 sm:px-6">
    <div class="flex items-start justify-between gap-6">
      <div class="w-full md:w-3/5">
        <p class="text-xs tracking-[0.18em] text-gray-500 font-medium uppercase">Unser Portfolio</p>
        <h2 class="mt-3 text-3xl sm:text-4xl md:text-5xl font-extrabold text-gray-900 leading-tight">
          Projekte</h2>
        <p class="mt-4 max-w-prose text-gray-600">Dicta sunt explicabo. Nemo enim ipsam voluptatem
          quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur. Dicta sunt
          explicabo. Nemo enim ipsam voluptatem quia voluptas.</p>
      </div>
      <div class="hidden md:flex items-center gap-3 pt-2">
        <button id="pf-prev"
                class="pf-btn size-10 rounded-full border border-gray-300 text-gray-500 hover:text-white hover:bg-gray-900 hover:border-gray-400 disabled:opacity-40 disabled:hover:border-gray-300 disabled:hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-300 flex items-center justify-center"
                aria-label="Previous" disabled>
          <span aria-hidden="true">←</span>
        </button>
        <button id="pf-next"
                class="pf-btn size-10 rounded-full border border-gray-300 text-gray-700 hover:text-white hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-300 flex items-center justify-center"
                aria-label="Next">
          <span aria-hidden="true">→</span>
        </button>
      </div>
    </div>

    <div class="relative mt-10">
      <!-- Slider viewport -->
      <div id="pf-track"
           class="group/track flex overflow-x-auto snap-x snap-mandatory scroll-smooth gap-6 pr-4 -mr-4 pb-2"
           tabindex="0" aria-roledescription="carousel" aria-label="Portfolio work examples">
        {slides.map((s, idx) => (
            <article
                class={`group relative ${idx % 2 === 0 ? 'min-w-[450px]' : 'min-w-[840px]'} snap-start select-none`}>
              <div class="h-[420px] overflow-hidden shadow-[0_8px_30px_rgba(0,0,0,0.08)] bg-white">
                <Image
                    src={s.img}
                    alt={s.title}
                    loading="lazy"
                    width={s.width}
                    height={s.height}
                       class="size-full object-cover transition-transform duration-700 ease-[cubic-bezier(0.22,1,0.36,1)] group-hover:scale-[1.03]"/>
              </div>
              <!-- Overlay label -->
              <div class="absolute left-4 bottom-4">
                <div
                    class="backdrop-blur-[2px] bg-black/60 text-white px-4 py-3 shadow-lg opacity-0 -translate-x-3 group-hover:opacity-100 group-hover:translate-x-0 group-focus-within:opacity-100 group-focus-within:translate-x-0 transition-all duration-500 ease-out">
                  <div class="text-base sm:text-lg font-bold">{s.title}</div>
                  <div class="text-xs sm:text-sm text-white/80">{s.subtitle}</div>
                </div>
              </div>
            </article>
        ))}
      </div>

      <!-- Mobile arrows overlay -->
      <div class="md:hidden pointer-events-none absolute -top-14 right-0 flex gap-2">
        <button id="pf-prev-m"
                class="pointer-events-auto size-10 rounded-full border border-gray-300 text-gray-500 hover:text-white hover:bg-gray-900 disabled:opacity-40 flex items-center justify-center"
                aria-label="Previous" disabled>←
        </button>
        <button id="pf-next-m"
                class="pointer-events-auto size-10 rounded-full border border-gray-300 text-gray-700 hover:text-white hover:bg-gray-900 flex items-center justify-center"
                aria-label="Next">→
        </button>
      </div>
    </div>
  </div>

  <script>
    const track = document.getElementById('pf-track');
    const prev = document.getElementById('pf-prev');
    const next = document.getElementById('pf-next');
    const prevM = document.getElementById('pf-prev-m');
    const nextM = document.getElementById('pf-next-m');

    const buttons = [prev, next, prevM, nextM].filter(Boolean);

    const getCards = () => Array.from(track?.querySelectorAll('article') || []);

    const getCurrentIndex = () => {
      const cards = getCards();
      const scrollLeft = track?.scrollLeft ?? 0;
      let idx = 0;
      let minDiff = Infinity;
      cards.forEach((card, i) => {
        const diff = Math.abs((card as HTMLElement).offsetLeft - scrollLeft);
        if (diff < minDiff) {
          minDiff = diff;
          idx = i;
        }
      });
      return idx;
    };

    const scrollToIndex = (index) => {
      const cards = getCards();
      if (!cards.length) return;
      const clamped = Math.max(0, Math.min(index, cards.length - 1));
      (cards[clamped] as HTMLElement).scrollIntoView({
        behavior: 'smooth',
        inline: 'start',
        block: 'nearest'
      });
    };

    const update = () => {
      if (!track) return;
      const atStart = track.scrollLeft <= 2;
      const atEnd = Math.ceil(track.scrollLeft + track.clientWidth) >= track.scrollWidth - 2;
      if (prev) prev.disabled = atStart;
      if (prevM) prevM.disabled = atStart;
    };

    const go = (dir = 1) => {
      const current = getCurrentIndex();
      scrollToIndex(current + dir);
    };

    buttons.forEach((b) =>
        b?.addEventListener('click', (e) => {
          const dir = (e.currentTarget === prev || e.currentTarget === prevM) ? -1 : 1;
          go(dir);
        })
    );

    track?.addEventListener('scroll', () => update());
    window.addEventListener('resize', () => update());
    update();

    // Keyboard navigation
    track?.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') {
        e.preventDefault();
        go(1);
      } else if (e.key === 'ArrowLeft') {
        e.preventDefault();
        go(-1);
      }
    });

  </script>
</section>

<style>
  /* Hide horizontal scrollbar for the portfolio slider track */
  #pf-track {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }

  #pf-track::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
    width: 0;
    height: 0;
  }
</style>
